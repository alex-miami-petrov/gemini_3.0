from address_book import Record, AddressBook, Notes, BookForNotes
from validation_functions.validation import input_error
from validation_functions.validation import name_validation, phone_validation

########################### ADD CONTACT ##################################

@name_validation
@phone_validation
@input_error
def add_contact(name: str, phone_number: str, book: AddressBook) -> str:
    #–æ—á–∏—â–∞—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –≤ —ñ–º–µ–Ω—ñ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    name = name.strip()

    #—à—É–∫–∞—î–º–æ –∑–∞–ø–∏—Å –≤ –∫–Ω–∏–∑—ñ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
    record = book.find_record(name)

    if record is not None:
        #—è–∫—â–æ –∫–æ–Ω—Ç–∞–∫—Ç –≤–∂–µ —î, –¥–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
        try:
            record.add_phone(phone_number)
            return f"Phone number {phone_number} added to {name}."
        except ValueError as e:
            return f"Error: {str(e)}"
    else:
        #—è–∫—â–æ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
        try:
            record = Record(name)
            record.add_phone(phone_number)
            book.add_record(record)
            return f"Contact {name} added with phone number {phone_number}."
        except ValueError as e:
            return f"Error: {str(e)}"

########################### PHONE ##################################

@input_error
def change_phone(args, book):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–º—ñ–Ω–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É."""
    if len(args) < 2:
        return "Error: Two arguments required: name, new_phone."

    name, new_phone = args[0], args[1]
    record = book.find_record(name)

    if record:
        try:
            #–ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å—Ç–∞—Ä–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —ñ —Ä–µ–¥–∞–≥—É—î–º–æ –π–æ–≥–æ
            old_phone = record.phones[0].phone if record.phones else None  #–±–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
            if old_phone:
                #—Ä–µ–¥–∞–≥—É—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω
                record.edit_phone(old_phone, new_phone)
                return f"Phone number for {name} changed from {old_phone} to {new_phone}."
            else:
                return f"No phone number found for {name}."
        except ValueError as e:
            return f"Error: {e}"  #—è–∫—â–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ
    else:
        return f"Contact with name {name} not found."

@input_error
def show_phone(name: str, book: AddressBook) -> str:
    if not name:
        return "Invalid command. Usage: phone [name]"

    name = name.strip() #–æ—á–∏—â–∞—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –≤ —ñ–º–µ–Ω—ñ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ

    #—à—É–∫–∞—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç –≤ –∫–Ω–∏–∑—ñ
    record = book.find_record(name)

    if record:
        if record.phones:
            phone_numbers = "; ".join(str(p.phone) for p in record.phones)
            return f"Phone numbers for {name.capitalize()}: {phone_numbers}"
        else:
            return f"Contact {name.capitalize()} has no phone numbers."
    else:
        return f"Contact with name {name.capitalize()} not found."

########################### SHOW ALL ##################################

@input_error
def show_all(book):
    if not book.data: #–ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∞–¥—Ä–µ—Å–Ω–∞ –∫–Ω–∏–≥–∞ –ø–æ—Ä–æ–∂–Ω—è
        return "No contacts found."
    return "\n".join(str(record) for record in book.data.values()) #–ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –≤ –∞–¥—Ä–µ—Å–Ω—ñ–π –∫–Ω–∏–∑—ñ

########################### BIRTHDAYS ##################################

@input_error
def add_birthday(args, book):
    name, birthday = args[0], args[1]
    record = book.find_record(name)
    if record:
        try:
            #–¥–æ–¥–∞—î–º–æ –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–æ –∑–∞–ø–∏—Å—É
            record.add_birthday(birthday)
            return f"Birthday for {name} added: {birthday}."
        except ValueError as e:
            return str(e)
    else:
        return f"Contact with name {name} not found."

@input_error
def show_birthday(args, book):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É."""
    if not args:
        return "Error: No name provided."
    
    #–ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ `args` –Ω–∞ —Å–ø–∏—Å–æ–∫, —è–∫—â–æ —Ü–µ –ø—Ä–æ—Å—Ç–æ —Ä—è–¥–æ–∫
    if isinstance(args, str):
        args = [args]

    name = args[0]
    record = book.find_record(name)
    
    if record:
        if record.birthday is None:
            return f"No birthday found for {name}."
        return f"Birthday for {name}: {record.birthday}"
    else:
        return f"Contact with name {name} not found."

@input_error
def birthdays(book):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –º–∞–π–±—É—Ç–Ω—ñ—Ö –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è."""
    upcoming_birthdays = book.upcoming_birthdays()  #–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–∂–µ –≥–æ—Ç–æ–≤–∏–π –º–µ—Ç–æ–¥
    if not upcoming_birthdays:
        return "No upcoming birthdays."
    
    return "\n".join([f"For {entry['name']}: congratulation date is {entry['congratulation_date']}" for entry in upcoming_birthdays])

@input_error
def all_birthdays(book, number_of_days):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –≤ –∑–∞–¥–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥."""
    birthdays = book.birthdays_pack(days=number_of_days)
    if not birthdays:
        return "üéà –ù–µ–º–∞—î –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –≤ –Ω–∞–π–±–ª–∏–∂—á—ñ –¥–Ω—ñ."
    return "\n".join([f"{name}: {birthday}" for name, birthday in birthdays.items()])

########################### EMAILS ##################################

@input_error
def add_email(args, book):
    name, email = args[0], args[1]
    record = book.find_record(name)
    if record:
        try:
            #–¥–æ–¥–∞—î–º–æ –º–µ–π–ª –¥–æ –∑–∞–ø–∏—Å—É
            record.add_email(email)
            return f"Email for {name} added: {email}."
        except ValueError as e:
            return str(e)
    else:
        return f"Contact with name {name} not found."
    
@input_error
def show_email(name, book):
    record = book.find_record(name)
    if record:
        if record.emails:  #–ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î email-–∏
            emails = "; ".join(str(email) for email in record.emails)  #–æ–±'—î–¥–Ω—É—î–º–æ –≤—Å—ñ email-–∏
            return f"Emails for {name}: {emails}"
        else:
            return f"No email found for {name}."
    else:
        return f"Contact with name {name} not found."

@input_error
def change_email(args, book):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–º—ñ–Ω–∏ email."""
    if len(args) != 3:
        return "Error: Three arguments required: name, old_email, new_email."

    name, old_email, new_email = args[0], args[1], args[2]
    record = book.find_record(name)

    if record:
        try:
            # –†–µ–¥–∞–≥—É—î–º–æ email
            record.edit_email(old_email, new_email)
            return f"Email for {name} changed from {old_email} to {new_email}."
        except ValueError as e:
            return f"Error: {e}"  # –ü–æ–∫–∞–∂–µ–º–æ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ email –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —á–∏ —î —ñ–Ω—à–∞ –ø—Ä–æ–±–ª–µ–º–∞
    else:
        return f"Contact with name {name} not found."

########################### RECORDS ##################################

@input_error
def find_record(name, book):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É –∫–æ–Ω—Ç–∞–∫—Ç—É."""
    record = book.find_record(name)
    if record:
        return str(record)
    else:
        return f"Contact with name {name} not found."
    
@input_error
def remove_record(name, book):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É."""
    record = book.find_record(name)
    if record:
        book.remove_record(name)
        return f"Contact {name} removed."


########################### NOTES ##################################
  
@input_error
def show_note(name, book):
    record = book.find_record(name)
    
    if not record:
        return f"Error: Contact with name {name} not found."
    
    #–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —ñ—Å–Ω—É—î –æ–±'—î–∫—Ç notes —ñ —á–∏ —Ü–µ –∫–ª–∞—Å BookForNotes
    if not isinstance(record.notes, BookForNotes) or not record.notes.data:
        return f"Error: No valid notes found for {name}."
    
    #–æ—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –Ω–æ—Ç–∞—Ç–∫–∏ –±–µ–∑ –∫–≤–∞–¥—Ä–∞—Ç–Ω–∏—Ö –¥—É–∂–æ–∫
    notes = record.notes.show_notes().replace("[", "").replace("]", "")  #–≤–∏–¥–∞–ª—è—î–º–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ñ –¥—É–∂–∫–∏
    
    #–∑–±–∏—Ä–∞—î–º–æ —Ç–µ–≥–∏ –¥–ª—è –≤—Å—ñ—Ö –Ω–æ—Ç–∞—Ç–æ–∫
    all_tags = set()
    for note in record.notes.data.values():
        if isinstance(note, Notes):  #–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –æ–±'—î–∫—Ç –∫–ª–∞—Å—É Notes
            all_tags.update(note.tag)  #–¥–æ–¥–∞—î–º–æ —Ç–µ–≥–∏ –∑ –Ω–æ—Ç–∞—Ç–∫–∏
    
    #—è–∫—â–æ —Ç–µ–≥–∏ —î, –º–∏ —ó—Ö –ø–æ–∫–∞–∂–µ–º–æ, —ñ–Ω–∞–∫—à–µ –ø–æ–∫–∞–∂–µ–º–æ "No tags"
    tags = ", ".join(sorted(all_tags)) if all_tags else "No tags"
    
    #–ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –±—ñ–ª—å—à —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
    return f"Notes for {name}: {notes} | Tags: {tags}"

@input_error
def add_note(args, book):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏."""
    name, note_text = args[0], " ".join(args[1:])
    record = book.find_record(name)
    
    if not record:
        return f"Contact with name {name} not found."

    try:
        #–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ notes ‚Äî –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø—É
        if not isinstance(record.notes, BookForNotes):
            record.notes = BookForNotes()

        #—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ Notes
        note = Notes(note_text)

        #–¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏
        record.notes.add_note(note)

        return f"Note for {name} added: {note_text}."
    except ValueError as e:
        return str(e)
    
@input_error
def remove_note(name, note_text, book):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏."""
    
    record = book.find_record(name)  # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞ —ñ–º'—è–º
    
    if record:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ –Ω–æ—Ç–∞—Ç–∫–∏
        deleted = False
        for note_id, note in record.notes.data.items():
            if note_text in note.notes:  # –Ø–∫—â–æ —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏ –º—ñ—Å—Ç–∏—Ç—å –∑–∞–∑–Ω–∞—á–µ–Ω–∏–π —Ç–µ–∫—Å—Ç
                if record.notes.delete_note(note_id):  # –í–∏–¥–∞–ª—è—î–º–æ —Ü—é –Ω–æ—Ç–∞—Ç–∫—É –∑–∞ —ó—ó id
                    deleted = True
                    break
        
        if deleted:
            return f"Note for {name} removed."
        else:
            return f"Error: No note found matching '{note_text}' for {name}."
    else:
        return f"Contact with name {name} not found."
 
@input_error
def edit_note(args, book):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏."""
    name, old_note, new_note = args[0], args[1], args[2]
    record = book.find_record(name)
    
    if record:
        try:
            #—Ä–µ–¥–∞–≥—É—î–º–æ –Ω–æ—Ç–∞—Ç–∫—É –≤ –∑–∞–ø–∏—Å—ñ
            if record.notes.edit_note(old_note, new_note):  #–ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–æ—Ç–∞—Ç–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–∞ —ñ –∑–º—ñ–Ω–µ–Ω–∞
                return f"Note for {name} changed from '{old_note}' to '{new_note}'."
            else:
                return f"Error: No note found matching '{old_note}' for {name}."
        except ValueError as e:
            return str(e)
    else:
        return f"Contact with name {name} not found."
    

@input_error
def add_tag(name, tag, book):
    record = book.find_record(name)
    
    if not record:
        return f"Error: Contact with name {name} not found."
    
    if not isinstance(record.notes, BookForNotes) or not record.notes.data:
        return f"Error: No valid notes found for {name}."
    
    #–ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –Ω–æ—Ç–∞—Ç–∫–∏
    if not record.notes.data:
        return f"Error: No notes found for {name}."
    
    #–æ—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é –Ω–æ—Ç–∞—Ç–∫—É
    last_note = list(record.notes.data.values())[-1]

    try:
        #–¥–æ–¥–∞—î–º–æ —Ç–µ–≥ –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏
        last_note.add_tag(tag)
        return f"Tag '{tag}' added to note: {last_note.notes}"
    except Exception as e:
        return f"Failed to add tag: {e}"